<aura:documentation>
	<aura:description>
		<!-- description -->
		<p>
			The <code>c:apex</code> component can be used to execute an Apex server method. Although
			you can execute an Apex method without using this component, it requires a lot of
			repeated boilerplate code. Using the <code>c:apex</code> component allows you to focus
			on just the logic needed within your component and not all of the extra code needed to
			actually invoke the Apex method or handle errors.
		</p>

		<p>
			Use the component's <code>getModule</code> method to obtain a reference to the
			code module. For a list of all of the methods provided by the returned module and to
			view documentation on each method refer to the code in the component's helper resource
			(/aura/apex/apexHelper.js).
		</p>
		<!-- /description -->

		<!-- options -->
		<h4>Options</h4>

		<p>
			The <code>execute</code> method accepts an optional <code>opts</code> argument which can
			be used to specify execution options as well as callback functions for handing success
			and failure conditions. The table below lists all of the options that can be specified
			via the <code>opts</code> argument.
		</p>

		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>params</td>
					<td>Object</td>
					<td>
						An object containing parameter values to be passed to the Apex method.
					</td>
				</tr>
				<tr>
					<td>abortable</td>
					<td>Boolean</td>
					<td>
						If true then the action is marked as abortable. For more information about
						abortable actions refer to the
						<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_abortable_actions.htm">Lightning Components Developer Guide</a>.
					</td>
				</tr>
				<tr>
					<td>storable</td>
					<td>Boolean</td>
					<td>
						If true then the action is marked as storable. For more information about
						storable actions refer to the
						<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_storable_actions.htm">Lightning Components Developer Guide</a>.
					</td>
				</tr>
				<tr>
					<td>success</td>
					<td>Function</td>
					<td>
						A function to be executed when the Apex method is successful. This function
						will be called with the following arguments:

						<ul>
							<li>
								<strong>returnValue</strong> -
								This is the value returned by the Apex method.
							</li>
							<li>
								<strong>state</strong> -
								This is the state returned by the server. Refer to the
								<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_actions_states.htm">Lightning Components Developer Guide</a>
								for more information about action states.
							</li>
						</ul>
					</td>
				</tr>
				<tr>
					<td>failure</td>
					<td>Function</td>
					<td>
						A function to be executed if the Apex method fails. This function will be
						called with the following arguments:

						<ul>
							<li>
								<strong>error</strong> -
								An <code>Error</code> object. Use the object's <code>message</code>
								property to get the error message.
							</li>
							<li>
								<strong>state</strong> -
								This is the state returned by the server. Refer to the
								<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_actions_states.htm">Lightning Components Developer Guide</a>
								for more information about action states.
							</li>
						</ul>
					</td>
				</tr>
				<tr>
					<td>complete</td>
					<td>Function</td>
					<td>
						A function to be executed when the Apex method completes regardless of
						success or failure. This function will be called with no arguments.
					</td>
				</tr>
				<tr>
					<td>context</td>
					<td>Object</td>
					<td>
						If a value is specified then it will be used as the <code>this</code> object
						in your callback functions. If a value is not specified, however, then
						<code>this</code> will be <code>undefined</code> in your callback functions.
						It is typical to pass in a reference to your component's helper here, but
						you can really pass in anything you like.
					</td>
				</tr>
			</tbody>
		</table>
		<!-- /options -->

		<!-- example -->
		<h4>Usage Example</h4>

		<p>This example will demonstrate basic usage of the <code>c:apex</code> component.</p>

		<h5>Component Markup</h5>
<pre><![CDATA[<!-- MyComponent.cmp -->
<aura:component controller="MyApexClass">
  <aura:attribute name="message" type="String" />

  <c:apex aura:id="apex" />
  <button onclick="{!c.testButtonClick}">Test</button>

  <p>{!v.message}</p>
</aura:component>
]]></pre>

		<h5>Component Controller</h5>
<pre><![CDATA[// MyComponentController.js
({
  testButtonClick: function(component, event, helper) {
    // Begin by obtaining a reference to the apex module
    var apex = component.find('apex').getModule();

    // Next, call the Apex method. The success and failure callbacks are optional. You
    // only need to specify a callback if you intend to actually perform some action
    apex.execute(component, 'echo', {
      abortable: true,
      params: {
        message: 'Hello world!'
      },
      success: function(returnValue) {
        // Success
        component.set('v.message', returnValue);
      },
      failure: function(error) {
        // Failure
        console.error('An error occurred', error);
      }
    });
  }
})
]]></pre>

		<h5>Apex Class</h5>
<pre><![CDATA[// MyApexClass.cls
public class MyApexClass {
  // A method which simply returns the input with some text added
  @AuraEnabled
  public static String echo(String message) {
    return 'Message from server: ' + message;
  }
}
]]></pre>
		<!-- /example -->
	</aura:description>
</aura:documentation>