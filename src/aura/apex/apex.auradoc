<aura:documentation>
	<aura:description>
		<!-- description -->
		<p>
			The <code>c:apex</code> component simplifies the task of invoking server-side Apex
			methods from your Lightning components. Executing server-side Apex in your component is
			not difficult, but there is a lot of repeated code. The purpose of the
			<code>c:apex</code> component is to provide a reusable solution that removes much of the
			redundant response handling logic as possible and allows you to specify callbacks for
			only the states that you need to handle.
		</p>
		<!-- /description -->

		<!-- options -->
		<h3 class="slds-text-heading_medium">Options</h3>

		<p>
			The component's <code>getHandler</code> method accepts an optional <code>opts</code>
			argument which is used to specify one or more callback functions for handing success and
			failure conditions. The table below lists all of the options that can be specified via
			the <code>opts</code> argument.
		</p>

		<table class="slds-table slds-table_bordered slds-table_cell-buffer slds-table_striped">
			<thead>
				<tr class="slds-text-title_caps">
					<th scope="col">Name</th>
					<th scope="col">Type</th>
					<th scope="col">Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>success</td>
					<td>Function</td>
					<td class="slds-cell-wrap">
						A function to be executed when the Apex method is successful. This function
						will be called with the following arguments:

						<ul class="slds-list_dotted">
							<li>
								<strong>returnValue</strong> -
								This is the value returned by the Apex method.
							</li>
							<li>
								<strong>state</strong> -
								This is the state returned by the server. Refer to the
								<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_actions_states.htm" target="_blank">Lightning Components Developer Guide</a>
								for more information about action states.
							</li>
						</ul>
					</td>
				</tr>
				<tr>
					<td>failure</td>
					<td>Function</td>
					<td class="slds-cell-wrap">
						A function to be executed if the Apex method fails. This function will be
						called with the following arguments:

						<ul class="slds-list_dotted">
							<li>
								<strong>error</strong> -
								An <code>Error</code> object. Use the object's <code>message</code>
								property to get the error message.
							</li>
							<li>
								<strong>state</strong> -
								This is the state returned by the server. Refer to the
								<a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/controllers_server_actions_states.htm" target="_blank">Lightning Components Developer Guide</a>
								for more information about action states.
							</li>
						</ul>
					</td>
				</tr>
				<tr>
					<td>complete</td>
					<td>Function</td>
					<td class="slds-cell-wrap">
						A function to be executed after the Apex method completes regardless of
						whether it was successful. This function will be called with no arguments.
					</td>
				</tr>
				<tr>
					<td>context</td>
					<td>Object</td>
					<td class="slds-cell-wrap">
						If a value is specified then it will be used as the <code>this</code> object
						in your callback functions. If a value is not specified, however, then
						<code>this</code> will be the object that was provided to the action's
						<code>setCallback</code> method.
					</td>
				</tr>
			</tbody>
		</table>
		<!-- /options -->

		<!-- example -->
		<h3 class="slds-text-heading_medium">Usage Example</h3>

		<p>This example will demonstrate basic usage of the <code>c:apex</code> component.</p>

		<h4 class="slds-text-heading_small">Component Markup</h4>
<pre><![CDATA[<!-- MyComponent.cmp -->
<aura:component controller="MyApexClass">
  <aura:attribute name="message" type="String" />

  <c:apex aura:id="apex" />
  <button onclick="{!c.testButtonClick}">Test</button>

  <p>{!v.message}!</p>
</aura:component>
]]></pre>

		<h4 class="slds-text-heading_small">Component Controller</h4>
<pre><![CDATA[// MyComponentController.js
({
  testButtonClick: function(component, event, helper) {
    // Begin by obtaining a reference to the apex component
    var apex = component.find('apex');

    // The apex component's getHandler() method will return a function that you can pass
    // to your action's setCallback() method and will handle all of the error handling for
    // you. You can specify 3 callbacks which will be called by the handler. All of these
    // callbacks are optional
    var handler = apex.getHandler({
       succes: function(returnValue, state) {
         // Success
         component.set('v.message', returnValue);
       },
       failure: function(error, state) {
         // Failure
         console.error('Uh oh! Something went wrong', error);
       },
       complete: function() {
         // Complete
         console.log('Apex method complete!');
       }
    });

    // Enqueue the action. Use the function returned by the apex component's getHandler()
    // method as the callback for the action
    var action = component.get('c.echo');
    action.setParams({
      message: 'Hello world!'
    });
    action.setCallback(null, handler);
    $A.enqueueAction(action);
  }
})
]]></pre>

		<h4 class="slds-text-heading_small">Apex Class</h4>
<pre><![CDATA[// MyApexClass.cls
public class MyApexClass {
  // A simple method which simply returns the input with some text added
  @AuraEnabled
  public String echo(String message) {
    return 'Message from server: ' + message;
  }
}
]]></pre>
		<!-- /example -->
	</aura:description>
</aura:documentation>